/// @mainpage
/// @section About
///
/// primesieve is a C/C++ library for fast prime number generation. It
/// generates the primes below 10^9 in just 0.2 seconds on a single
/// core of an Intel Core i7-6700 3.4GHz CPU. primesieve can generate
/// primes and prime k-tuplets up to 2^64. primesieve's memory
/// requirement is about pi(sqrt(n)) * 8 bytes per thread, its
/// run-time complexity is O(n log log n) operations. The recommended
/// way to get started is to first have a look at a few C or C++
/// example programs. The most common use cases are iterating over
/// primes using next_prime() or prev_prime() and storing primes in
/// a vector or an array.
///
/// For more information please visit https://github.com/kimwalisch/primesieve.
///
/// @section CPP_API C++ API
///
/// @li @link primesieve.hpp primesieve.hpp @endlink - primesieve C++ header.
/// @li @link primesieve_iterator.cpp primesieve_iterator.cpp @endlink - Example that shows how to iterate over primes using primesieve::iterator.
/// @li @link store_primes_in_vector.cpp store_primes_in_vector.cpp @endlink - Example that shows how to store primes in a std::vector.
/// @li @link count_primes.cpp count_primes.cpp @endlink - Example that shows how to count primes.
///
/// @section C_API C API
///
/// @li @link primesieve.h primesieve.h @endlink - primesieve C header.
/// @li @link primesieve_iterator.c primesieve_iterator.c @endlink - Example that shows how to iterate over primes using @link iterator.h primesieve_iterator @endlink.
/// @li @link store_primes_in_array.c store_primes_in_array.c @endlink - Example that shows how to store primes in an array.
/// @li @link count_primes.c count_primes.c @endlink - Example that shows how to count primes.
///
